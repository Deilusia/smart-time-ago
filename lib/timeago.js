// Generated by CoffeeScript 1.3.3
(function() {
  var TimeAgo;

  TimeAgo = (function() {

    function TimeAgo(element, options) {
      this.startInterval = 30000;
      this.init(element, options);
    }

    TimeAgo.prototype.init = function(element, options) {
      this.$element = $(element);
      this.options = $.extend({}, $.fn.timeago.defaults, options);
      this.updateTime();
      return this.startTimer();
    };

    TimeAgo.prototype.startTimer = function() {
      var self;
      self = this;
      return this.interval = setInterval((function() {
        return self.refresh();
      }), this.startInterval);
    };

    TimeAgo.prototype.stopTimer = function() {
      return clearInterval(this.interval);
    };

    TimeAgo.prototype.restartTimer = function() {
      this.stopTimer();
      return this.startTimer();
    };

    TimeAgo.prototype.refresh = function() {
      this.updateTime();
      return this.updateInterval();
    };

    TimeAgo.prototype.updateTime = function() {
      var self;
      self = this;
      return this.$element.findAndSelf(this.options.selector).each(function() {
        var timeAgoInWords;
        timeAgoInWords = self.timeAgoInWords($(this).attr(self.options.attr));
        return $(this).html(timeAgoInWords);
      });
    };

    TimeAgo.prototype.updateInterval = function() {
      var filter, newestTime, newestTimeInMinutes, newestTimeSrc;
      if (this.$element.findAndSelf(this.options.selector).length > 0) {
        if (this.options.dir === "up") {
          filter = ":first";
        } else if (this.options.dir === "down") {
          filter = ":last";
        }
        newestTimeSrc = this.$element.findAndSelf(this.options.selector).filter(filter).attr(this.options.attr);
        newestTime = this.parse(newestTimeSrc);
        newestTimeInMinutes = this.getTimeDistanceInMinutes(newestTime);
        if (newestTimeInMinutes < 44.5 && this.startInterval !== 30000) {
          this.startInterval = 30000;
          return this.restartTimer();
        } else if (newestTimeInMinutes >= 44.5 && newestTimeInMinutes < 89.5 && this.startInterval !== 60000 * 15) {
          this.startInterval = 60000 * 15;
          return this.restartTimer();
        } else if (newestTimeInMinutes >= 89.5 && newestTimeInMinutes < 1439.5 && this.startInterval !== 60000 * 30) {
          this.startInterval = 60000 * 30;
          return this.restartTimer();
        }
      }
    };

    TimeAgo.prototype.timeAgoInWords = function(timeString) {
      var absolutTime, distanceInMinutes;
      absolutTime = this.parse(timeString);
      distanceInMinutes = this.getTimeDistanceInMinutes(absolutTime);
      return this.distanceOfTimeInWords(distanceInMinutes) + (" " + this.options.suffix);
    };

    TimeAgo.prototype.parse = function(iso8601) {
      var timeStr;
      timeStr = $.trim(iso8601);
      timeStr = timeStr.replace(/\.\d\d\d+/, "");
      timeStr = timeStr.replace(/-/, "/").replace(/-/, "/");
      timeStr = timeStr.replace(/T/, " ").replace(/Z/, " UTC");
      timeStr = timeStr.replace(/([\+\-]\d\d)\:?(\d\d)/, " $1$2");
      return new Date(timeStr);
    };

    TimeAgo.prototype.getTimeDistanceInMinutes = function(absolutTime) {
      var timeDistance;
      timeDistance = new Date().getTime() - absolutTime.getTime();
      return (Math.abs(timeDistance) / 1000) / 60;
    };

    TimeAgo.prototype.distanceOfTimeInWords = function(dim) {
      if (dim >= 0 && dim < 0.5) {
        return "less than a minute";
      } else if (dim >= 0.5 && dim < 1.5) {
        return "1 minute";
      } else if (dim >= 1.5 && dim < 44.5) {
        return "" + (Math.round(dim)) + " minutes";
      } else if (dim >= 44.5 && dim < 89.5) {
        return "about 1 hour";
      } else if (dim >= 89.5 && dim < 1439.5) {
        return "about " + (Math.round(dim / 60)) + " hours";
      } else if (dim >= 1439.5 && dim < 2519.5) {
        return "1 day";
      } else if (dim >= 2519.5 && dim < 43199.5) {
        return "" + (Math.round(dim / 1440)) + " days";
      } else if (dim >= 43199.5 && dim < 86399.5) {
        return "about 1 month";
      } else if (dim >= 86399.5 && dim < 525599.5) {
        return "" + (Math.round(dim / 43200)) + " months";
      } else if (dim >= 525599.5 && dim < 655199.5) {
        return "about 1 year";
      } else if (dim >= 655199.5 && dim < 914399.5) {
        return "over 1 year";
      } else if (dim >= 914399.5 && dim < 1051199.5) {
        return "almost 2 years";
      } else {
        return "about " + (Math.round(dim / 525600)) + " years";
      }
    };

    return TimeAgo;

  })();

  $.fn.timeago = function(options) {
    if (options == null) {
      options = {};
    }
    return this.each(function() {
      var $this, data;
      $this = $(this);
      data = $this.data("timeago");
      if (!data) {
        $this.data("timeago", new TimeAgo(this, options));
      }
      if (typeof options === 'string') {
        return data[options]();
      }
    });
  };

  $.fn.findAndSelf = function(selector) {
    return this.find(selector).add(this.filter(selector));
  };

  $.fn.timeago.Constructor = TimeAgo;

  $.fn.timeago.defaults = {
    selector: 'time.timeago',
    attr: 'datetime',
    dir: 'up',
    suffix: 'ago'
  };

}).call(this);
