// Generated by CoffeeScript 1.3.3
(function() {
  var TimeAgo;

  TimeAgo = (function() {

    function TimeAgo(element, options) {
      this.startInterval = 5000;
      this.init(element, options);
    }

    TimeAgo.prototype.init = function(element, options) {
      this.$element = $(element);
      this.options = $.extend({}, $.fn.timeago.defaults, options);
      this.updateTime();
      return this.startTimer();
    };

    TimeAgo.prototype.startTimer = function() {
      var self;
      self = this;
      return this.interval = setInterval((function() {
        return self.refresh();
      }), this.startInterval);
    };

    TimeAgo.prototype.stopTimer = function() {
      return clearInterval(this.interval);
    };

    TimeAgo.prototype.restartTimer = function() {
      this.stopTimer();
      return this.startTimer();
    };

    TimeAgo.prototype.refresh = function() {
      this.updateTime();
      return this.updateInterval();
    };

    TimeAgo.prototype.updateTime = function() {
      var self;
      self = this;
      return this.$element.findAndSelf(this.options.selector).each(function() {
        var timeAgoInWords;
        timeAgoInWords = self.timeAgoInWords($(this).attr(self.options.attr));
        return $(this).html(timeAgoInWords);
      });
    };

    TimeAgo.prototype.updateInterval = function() {
      var filter, newestTime, newestTimeInMinutes, newestTimeInSeconds, newestTimeSrc;
      if (this.$element.findAndSelf(this.options.selector).length > 0) {
        if (this.options.dir === "up") {
          filter = ":first";
        } else if (this.options.dir === "down") {
          filter = ":last";
        }
        newestTimeSrc = this.$element.findAndSelf(this.options.selector).filter(filter).attr(this.options.attr);
        newestTime = this.parse(newestTimeSrc);
        newestTimeInMinutes = this.getTimeDistanceInMinutes(newestTime);
        newestTimeInSeconds = this.getTimeDistanceInSeconds(newestTime);
        if (newestTimeInMinutes <= 1) {
          if (newestTimeInSeconds <= 9 && this.startInterval !== 5000) {
            this.startInterval = 5000;
            return this.restartTimer();
          } else if (newestTimeInSeconds <= 60 && this.startInterval !== 10000) {
            this.startInterval = 10000;
            return this.restartTimer();
          }
        } else if (newestTimeInMinutes >= 2 && newestTimeInMinutes <= 45 && this.startInterval !== 60000) {
          this.startInterval = 60000;
          return this.restartTimer();
        } else if (newestTimeInMinutes >= 46 && newestTimeInMinutes <= 89 && this.startInterval !== 60000 * 30) {
          this.startInterval = 60000 * 30;
          return this.restartTimer();
        } else if (newestTimeInMinutes >= 90 && newestTimeInMinutes <= 2519 && this.startInterval !== 60000 * 60) {
          this.startInterval = 60000 * 60;
          return this.restartTimer();
        } else if (newestTimeInMinutes >= 2520 && this.startInterval !== 60000 * 60 * 24) {
          this.startInterval = 60000 * 60 * 24;
          return this.restartTimer();
        }
      }
    };

    TimeAgo.prototype.timeAgoInWords = function(timeString) {
      var absolutTime;
      absolutTime = this.parse(timeString);
      return this.distanceOfTimeInWords(absolutTime) + (" " + this.options.suffix);
    };

    TimeAgo.prototype.parse = function(iso8601) {
      var timeStr;
      timeStr = $.trim(iso8601);
      timeStr = timeStr.replace(/\.\d\d\d+/, "");
      timeStr = timeStr.replace(/-/, "/").replace(/-/, "/");
      timeStr = timeStr.replace(/T/, " ").replace(/Z/, " UTC");
      timeStr = timeStr.replace(/([\+\-]\d\d)\:?(\d\d)/, " $1$2");
      return new Date(timeStr);
    };

    TimeAgo.prototype.getTimeDistanceInMinutes = function(absolutTime) {
      var timeDistance;
      timeDistance = new Date().getTime() - absolutTime.getTime();
      return Math.round((Math.abs(timeDistance) / 1000.0) / 60.0);
    };

    TimeAgo.prototype.getTimeDistanceInSeconds = function(absolutTime) {
      var timeDistance;
      timeDistance = new Date().getTime() - absolutTime.getTime();
      return Math.round(Math.abs(timeDistance) / 1000.0);
    };

    TimeAgo.prototype.distanceOfTimeInWords = function(absolutTime) {
      var dim, dis;
      dim = this.getTimeDistanceInMinutes(absolutTime);
      dis = this.getTimeDistanceInSeconds(absolutTime);
      if (dim <= 1) {
        if (dis <= 4) {
          return "less than 5 seconds";
        } else if (dis >= 5 && dis <= 9) {
          return "less than 10 seconds";
        } else if (dis >= 10 && dis <= 19) {
          return "less than 20 seconds";
        } else if (dis >= 20 && dis <= 39) {
          return "half a minute";
        } else if (dis >= 40 && dis <= 59) {
          return "less than a minute";
        } else {
          return "1 minute";
        }
      } else if (dim >= 2 && dim <= 44) {
        return "" + dim + " minutes";
      } else if (dim >= 45 && dim <= 89) {
        return "about 1 hour";
      } else if (dim >= 90 && dim <= 1439) {
        return "about " + (Math.round(dim / 60.0)) + " hours";
      } else if (dim >= 1440 && dim <= 2519) {
        return "1 day";
      } else if (dim >= 2520 && dim <= 43199) {
        return "" + (Math.round(dim / 1440.0)) + " days";
      } else if (dim >= 43200 && dim <= 86399) {
        return "about 1 month";
      } else if (dim >= 86400 && dim <= 525599) {
        return "" + (Math.round(dim / 43200.0)) + " months";
      } else if (dim >= 525600 && dim <= 655199) {
        return "about 1 year";
      } else if (dim >= 655200 && dim <= 914399) {
        return "over 1 year";
      } else if (dim >= 914400 && dim <= 1051199) {
        return "almost 2 years";
      } else {
        return "about " + (Math.round(dim / 525600.0)) + " years";
      }
    };

    return TimeAgo;

  })();

  $.fn.timeago = function(options) {
    if (options == null) {
      options = {};
    }
    return this.each(function() {
      var $this, data;
      $this = $(this);
      data = $this.data("timeago");
      if (!data) {
        $this.data("timeago", new TimeAgo(this, options));
      }
      if (typeof options === 'string') {
        return data[options]();
      }
    });
  };

  $.fn.findAndSelf = function(selector) {
    return this.find(selector).add(this.filter(selector));
  };

  $.fn.timeago.Constructor = TimeAgo;

  $.fn.timeago.defaults = {
    selector: 'time.timeago',
    attr: 'datetime',
    dir: 'up',
    suffix: 'ago'
  };

}).call(this);
